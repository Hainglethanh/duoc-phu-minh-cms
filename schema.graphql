# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Product {
  id: ID!
  name: String
  slug: String
  shortDescription: String
  origin: String
  content: Product_content_Document
  uses: Product_uses_Document
  price: Int
  feature: ProductFeature
  productImages(
    where: ProductImageWhereInput! = {}
    orderBy: [ProductImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductImage!]
  productImagesCount(where: ProductImageWhereInput! = {}): Int
}

type Product_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Product_uses_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ProductWhereUniqueInput {
  id: ID
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  shortDescription: StringFilter
  origin: StringFilter
  price: IntNullableFilter
  feature: ProductFeatureWhereInput
  productImages: ProductImageManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input ProductImageManyRelationFilter {
  every: ProductImageWhereInput
  some: ProductImageWhereInput
  none: ProductImageWhereInput
}

input ProductOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  shortDescription: OrderDirection
  origin: OrderDirection
  price: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input ProductUpdateInput {
  name: String
  slug: String
  shortDescription: String
  origin: String
  content: JSON
  uses: JSON
  price: Int
  feature: ProductFeatureRelateToOneForUpdateInput
  productImages: ProductImageRelateToManyForUpdateInput
}

input ProductFeatureRelateToOneForUpdateInput {
  create: ProductFeatureCreateInput
  connect: ProductFeatureWhereUniqueInput
  disconnect: Boolean
}

input ProductImageRelateToManyForUpdateInput {
  disconnect: [ProductImageWhereUniqueInput!]
  set: [ProductImageWhereUniqueInput!]
  create: [ProductImageCreateInput!]
  connect: [ProductImageWhereUniqueInput!]
}

input ProductUpdateArgs {
  where: ProductWhereUniqueInput!
  data: ProductUpdateInput!
}

input ProductCreateInput {
  name: String
  slug: String
  shortDescription: String
  origin: String
  content: JSON
  uses: JSON
  price: Int
  feature: ProductFeatureRelateToOneForCreateInput
  productImages: ProductImageRelateToManyForCreateInput
}

input ProductFeatureRelateToOneForCreateInput {
  create: ProductFeatureCreateInput
  connect: ProductFeatureWhereUniqueInput
}

input ProductImageRelateToManyForCreateInput {
  create: [ProductImageCreateInput!]
  connect: [ProductImageWhereUniqueInput!]
}

type ProductImage {
  id: ID!
  image: ImageFieldOutput
  altText: String
  name: String
  product: Product
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input ProductImageWhereUniqueInput {
  id: ID
}

input ProductImageWhereInput {
  AND: [ProductImageWhereInput!]
  OR: [ProductImageWhereInput!]
  NOT: [ProductImageWhereInput!]
  id: IDFilter
  altText: StringFilter
  name: StringFilter
  product: ProductWhereInput
}

input ProductImageOrderByInput {
  id: OrderDirection
  altText: OrderDirection
  name: OrderDirection
}

input ProductImageUpdateInput {
  image: ImageFieldInput
  altText: String
  name: String
  product: ProductRelateToOneForUpdateInput
}

input ImageFieldInput {
  upload: Upload!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input ProductRelateToOneForUpdateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
  disconnect: Boolean
}

input ProductImageUpdateArgs {
  where: ProductImageWhereUniqueInput!
  data: ProductImageUpdateInput!
}

input ProductImageCreateInput {
  image: ImageFieldInput
  altText: String
  name: String
  product: ProductRelateToOneForCreateInput
}

input ProductRelateToOneForCreateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

type Slider {
  id: ID!
  name: String
  title: String
  subTitle: String
  status: Boolean
  url: String
  image: ImageFieldOutput
}

input SliderWhereUniqueInput {
  id: ID
}

input SliderWhereInput {
  AND: [SliderWhereInput!]
  OR: [SliderWhereInput!]
  NOT: [SliderWhereInput!]
  id: IDFilter
  name: StringFilter
  title: StringFilter
  subTitle: StringFilter
  status: BooleanFilter
  url: StringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input SliderOrderByInput {
  id: OrderDirection
  name: OrderDirection
  title: OrderDirection
  subTitle: OrderDirection
  status: OrderDirection
  url: OrderDirection
}

input SliderUpdateInput {
  name: String
  title: String
  subTitle: String
  status: Boolean
  url: String
  image: ImageFieldInput
}

input SliderUpdateArgs {
  where: SliderWhereUniqueInput!
  data: SliderUpdateInput!
}

input SliderCreateInput {
  name: String
  title: String
  subTitle: String
  status: Boolean
  url: String
  image: ImageFieldInput
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  posts: PostManyRelationFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForUpdateInput
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForCreateInput
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

type Post {
  id: ID!
  title: String
  thumbnail: ImageFieldOutput
  slug: String
  shortDescription: String
  status: String
  content: Post_content_Document
  publishDate: DateTime
  author: User
  postType: PostType
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  shortDescription: StringFilter
  status: StringNullableFilter
  publishDate: DateTimeNullableFilter
  author: UserWhereInput
  postType: PostTypeWhereInput
  tags: TagManyRelationFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  shortDescription: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
}

input PostUpdateInput {
  title: String
  thumbnail: ImageFieldInput
  slug: String
  shortDescription: String
  status: String
  content: JSON
  publishDate: DateTime
  author: UserRelateToOneForUpdateInput
  postType: PostTypeRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input PostTypeRelateToOneForUpdateInput {
  create: PostTypeCreateInput
  connect: PostTypeWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  thumbnail: ImageFieldInput
  slug: String
  shortDescription: String
  status: String
  content: JSON
  publishDate: DateTime
  author: UserRelateToOneForCreateInput
  postType: PostTypeRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input PostTypeRelateToOneForCreateInput {
  create: PostTypeCreateInput
  connect: PostTypeWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type PostType {
  id: ID!
  name: String
  slug: String
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input PostTypeWhereUniqueInput {
  id: ID
}

input PostTypeWhereInput {
  AND: [PostTypeWhereInput!]
  OR: [PostTypeWhereInput!]
  NOT: [PostTypeWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  posts: PostManyRelationFilter
}

input PostTypeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
}

input PostTypeUpdateInput {
  name: String
  slug: String
  posts: PostRelateToManyForUpdateInput
}

input PostTypeUpdateArgs {
  where: PostTypeWhereUniqueInput!
  data: PostTypeUpdateInput!
}

input PostTypeCreateInput {
  name: String
  slug: String
  posts: PostRelateToManyForCreateInput
}

type Tag {
  id: ID!
  name: String
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

type ProductFeature {
  id: ID!
  name: String
  product(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  productCount(where: ProductWhereInput! = {}): Int
}

input ProductFeatureWhereUniqueInput {
  id: ID
}

input ProductFeatureWhereInput {
  AND: [ProductFeatureWhereInput!]
  OR: [ProductFeatureWhereInput!]
  NOT: [ProductFeatureWhereInput!]
  id: IDFilter
  name: StringFilter
  product: ProductManyRelationFilter
}

input ProductManyRelationFilter {
  every: ProductWhereInput
  some: ProductWhereInput
  none: ProductWhereInput
}

input ProductFeatureOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input ProductFeatureUpdateInput {
  name: String
  product: ProductRelateToManyForUpdateInput
}

input ProductRelateToManyForUpdateInput {
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductFeatureUpdateArgs {
  where: ProductFeatureWhereUniqueInput!
  data: ProductFeatureUpdateInput!
}

input ProductFeatureCreateInput {
  name: String
  product: ProductRelateToManyForCreateInput
}

input ProductRelateToManyForCreateInput {
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

type FAQ {
  id: ID!
  question: String
  content: FAQ_content_Document
}

type FAQ_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input FAQWhereUniqueInput {
  id: ID
}

input FAQWhereInput {
  AND: [FAQWhereInput!]
  OR: [FAQWhereInput!]
  NOT: [FAQWhereInput!]
  id: IDFilter
  question: StringFilter
}

input FAQOrderByInput {
  id: OrderDirection
  question: OrderDirection
}

input FAQUpdateInput {
  question: String
  content: JSON
}

input FAQUpdateArgs {
  where: FAQWhereUniqueInput!
  data: FAQUpdateInput!
}

input FAQCreateInput {
  question: String
  content: JSON
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createProduct(data: ProductCreateInput!): Product
  createProducts(data: [ProductCreateInput!]!): [Product]
  updateProduct(
    where: ProductWhereUniqueInput!
    data: ProductUpdateInput!
  ): Product
  updateProducts(data: [ProductUpdateArgs!]!): [Product]
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProducts(where: [ProductWhereUniqueInput!]!): [Product]
  createProductImage(data: ProductImageCreateInput!): ProductImage
  createProductImages(data: [ProductImageCreateInput!]!): [ProductImage]
  updateProductImage(
    where: ProductImageWhereUniqueInput!
    data: ProductImageUpdateInput!
  ): ProductImage
  updateProductImages(data: [ProductImageUpdateArgs!]!): [ProductImage]
  deleteProductImage(where: ProductImageWhereUniqueInput!): ProductImage
  deleteProductImages(where: [ProductImageWhereUniqueInput!]!): [ProductImage]
  createSlider(data: SliderCreateInput!): Slider
  createSliders(data: [SliderCreateInput!]!): [Slider]
  updateSlider(where: SliderWhereUniqueInput!, data: SliderUpdateInput!): Slider
  updateSliders(data: [SliderUpdateArgs!]!): [Slider]
  deleteSlider(where: SliderWhereUniqueInput!): Slider
  deleteSliders(where: [SliderWhereUniqueInput!]!): [Slider]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createPostType(data: PostTypeCreateInput!): PostType
  createPostTypes(data: [PostTypeCreateInput!]!): [PostType]
  updatePostType(
    where: PostTypeWhereUniqueInput!
    data: PostTypeUpdateInput!
  ): PostType
  updatePostTypes(data: [PostTypeUpdateArgs!]!): [PostType]
  deletePostType(where: PostTypeWhereUniqueInput!): PostType
  deletePostTypes(where: [PostTypeWhereUniqueInput!]!): [PostType]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createProductFeature(data: ProductFeatureCreateInput!): ProductFeature
  createProductFeatures(data: [ProductFeatureCreateInput!]!): [ProductFeature]
  updateProductFeature(
    where: ProductFeatureWhereUniqueInput!
    data: ProductFeatureUpdateInput!
  ): ProductFeature
  updateProductFeatures(data: [ProductFeatureUpdateArgs!]!): [ProductFeature]
  deleteProductFeature(where: ProductFeatureWhereUniqueInput!): ProductFeature
  deleteProductFeatures(
    where: [ProductFeatureWhereUniqueInput!]!
  ): [ProductFeature]
  createFAQ(data: FAQCreateInput!): FAQ
  createFAQS(data: [FAQCreateInput!]!): [FAQ]
  updateFAQ(where: FAQWhereUniqueInput!, data: FAQUpdateInput!): FAQ
  updateFAQS(data: [FAQUpdateArgs!]!): [FAQ]
  deleteFAQ(where: FAQWhereUniqueInput!): FAQ
  deleteFAQS(where: [FAQWhereUniqueInput!]!): [FAQ]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  product(where: ProductWhereUniqueInput!): Product
  productsCount(where: ProductWhereInput! = {}): Int
  productImages(
    where: ProductImageWhereInput! = {}
    orderBy: [ProductImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductImage!]
  productImage(where: ProductImageWhereUniqueInput!): ProductImage
  productImagesCount(where: ProductImageWhereInput! = {}): Int
  sliders(
    where: SliderWhereInput! = {}
    orderBy: [SliderOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Slider!]
  slider(where: SliderWhereUniqueInput!): Slider
  slidersCount(where: SliderWhereInput! = {}): Int
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  postTypes(
    where: PostTypeWhereInput! = {}
    orderBy: [PostTypeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PostType!]
  postType(where: PostTypeWhereUniqueInput!): PostType
  postTypesCount(where: PostTypeWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  productFeatures(
    where: ProductFeatureWhereInput! = {}
    orderBy: [ProductFeatureOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductFeature!]
  productFeature(where: ProductFeatureWhereUniqueInput!): ProductFeature
  productFeaturesCount(where: ProductFeatureWhereInput! = {}): Int
  fAQS(
    where: FAQWhereInput! = {}
    orderBy: [FAQOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [FAQ!]
  fAQ(where: FAQWhereUniqueInput!): FAQ
  fAQSCount(where: FAQWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
